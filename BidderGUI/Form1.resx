<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing"">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="timer1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="countdowntimer.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>104, 17</value>
  </metadata>
  <data name="label16.Text" xml:space="preserve">
    <value>This will output the command
you need to use to get your
ledger to sign your transaction.
You need to send with batch size
to more than 1.
This is a mostly manual method to
send batches with ledger so it won't
work to send heaps of domains.</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMIOAADCDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACLi4sAlZWVA3BwcDWkpKRlqKioc8nJyY3o6Oi55+fnw/b2
        9t7v7+/i8vLy4vDw8OP19fXZ6OjowN7e3qi5ubl8sLCwcIiIiFNoaGgXbGxsAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAALCwsAOAgIACAAAAAGVlZQGnp6cy3Nzcatvb23jMzMyI1dXVqufn58ri4uLO4uLi4PX1
        9fr////////////////////////////////9/f3/5+fn8eLi4tfk5OTM5OTkw9LS0pjPz8+ExsbGa9DQ
        0FidnZ0PmpqaBeTk5AfPz88DmpqaP8jIyFS4uLh/y8vLl9DQ0Kfa2tq78fHxy/Ly8vb9/f3/////////
        /////////////////////////////////////////////////////////f39//z8/P///////Pz8//Ly
        8vfi4uLX4eHhz+jo6L3w8PC93d3dp5iYmG6MjIwH3t7eDqCgoEa8vLxm6+vrvf39/f//////////////
        //////////////////////////////////////////////////////////////r6+vHb29uWy8vLdOnp
        6b79/f39/Pz8/fDw8OH29vbt8vLyzO3t7ZrExMR9wcHBaAAAAAAAAAAAAAAAAOjo6ADZ2dla+vr6/P//
        ////////////////////////////////////////////////////////////////////////7Ozs5uTk
        5L7q6uq619fXePDw8Nr39/f94uLivdfX14TX19eUy8vLEczMzAAAAAAAAAAAAAAAAAAAAAAA1NTUAM/P
        zxjw8PDH/v7+////////////////////////////////////////////////////////////////////
        ///+/v7////////////19fXs9fX17/39/f/+/v7/8fHx0tvb27vY2Ng41dXVAAAAAAAAAAAAAAAAAAAA
        AACcnJwA5eXlANDQ0EXu7u7l/v7+////////////////////////////////////////////////////
        ///////////////////////////////////t7e3h1dXVm/Hx8dj8/Pz/7Ozs683NzZXBwcE109PTAAAA
        AAAAAAAAAAAAAAAAAACxsbEAFxcXAczMzEXq6urN+/v7////////////////////////////////////
        //////////////////////////////////////////////r6+vju7u7S1dXVjvj4+PTy8vLm0tLSi8XF
        xY7CwsIcAAAAAAAAAAAAAAAAAAAAAAAAAAB+fn4A////AL+/vx7b29t98fHx2vz8/P3/////////////
        ///////////////////////////////////////////////////////////////////t7e3b+Pj49P//
        ///19fXZ3Nzcg9ra2ksAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkpKSAD8/PwHOzs4g4ODgZ+zs
        7K/z8/Pd+fn59P39/f3+/v7/////////////////////////////////////////////////////////
        ///x8fHn7e3tz/Dw8O3b29vDzs7OXQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANTU
        1ACpqakArq6uDtXV1YXb29ud3t7eoOLi4rLp6enF8fHx2fb29uz8/Pz7/v7+////////////////////
        //////////////r6+vTi4uKn9PT0+NnZ2dTg4OC1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAALu7uwCysrIL7u7uxPr6+vv29vbm7u7u0ufn577c3Nyl3d3dlNra2pjh4eG07+/v2/v7
        +/r/////////////////////+Pj49+vr6939/f3/6urq1dXV1bwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAtLS0ADg4OAPo6Oir//////////////////////7+/v/4+Pj77+/v6+Dg
        4MrGxsaY2NjYiO/v78z7+/v7/////////////////Pz8/fn5+fr19fX03d3dvgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADR0dEA////AO3t7Zn+/v7///////////////////////Hx
        8f/a2tr329vb5erq6uXx8fHY1dXVbuLi4q/8/Pz8///////////w8PDh5OTkzvDw8PTb29t0AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8A5+fngf7+/v//////////////
        ///+/v7//Pz8/vb29vry8vL38/Pz8e3t7dPe3t6A29vbtPPz8+D//////v7+/+jo6N7u7u7pzMzMuru7
        uz8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO7u7gDb29tm+/v7////
        //////////////f39/jo6Ojr7u7u6eDg4OLt7e3o8/Pz3uLi4pTf39/L8/Pz4f//////////+Pj4+d/f
        39vHx8dVl5eXAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6urqAN7e
        3lj7+/v9////////////////+vr6/vf39/35+fn97e3t7/Ly8vPm5ubK0dHRhfDw8PT8/Pz8////////
        ///e3t7XvLy8ca6urgaysrIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADX19cA09PTQfj4+Pb/////////////////////9fX1/9fX1/zb29vq3t7e5uDg4MjW1taR/Pz8/v//
        ////////9/f39d/f34GsrKwNtbW1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAANvb2wDb29s0+Pj47//////////////////////+/v7//f39/+/v7/js7Oz04+Pjw9fX
        15r9/f3//f39//Hx8dvY2NhfpqamBrW1tQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACpqakAUlJSAcnJyS719fXj//////////////////////z8/P/p6en/3d3d4N/f
        39HU1NSq4+PjqfHx8ene3t6PzMzMKAAAAAC2trYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAtLS0AKysrArc3Nxw0tLSlOzs7NH/////////////////////8fHx9/j4
        +Pv7+/v++vr6/e7u7rvJyclRy8vLL1lZWQKOjo4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAMnJyQDDw8ML6+vrjPj4+Pzn5+e57u7uzP////////////////7+
        /v/j4+PT4uLiydvb28Pl5eXT09PTh6SkpALKysoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADGxsYA////AODg4G74+Pj57e3tztDQ0FHd3d2Z9/f38Pv7
        +/v+/v7+/f39//n5+fv4+Pj37u7u7/Dw8Orj4+OLwMDAB9PT0wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANPT0wDQ0NAi8vLy2uPj4+PV1dWd7u7ulevr
        67nZ2dmX2NjYmN/f36HT09Oj09PTo+Dg4KPY2NiP19fXluHh4brV1dVn8fHxANTU1AAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7OzsAN7e3mHv7+/y5eXl5PDw
        8Mzl5eXA/v7+//v7+/r4+Pjv8PDw4fT09N309PTd8fHx4fn5+e/8/Pz7+/v7/+Xl5aIAAAABvr6+AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8A5eXlhOTk
        5O7m5ubt19fXr9ra2rP///////////////////////////////////////////39/f/y8vL/4eHhkv//
        /wDOzs4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//
        /wDm5uZ+5eXl8ubm5vLIyMh46enpqP/////5+fn65eXlwPf39/L///////////r6+vPn5+fT9vb2/ejo
        6P3b29uF6OjoAOzs7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA4ODgANnZ2Uz5+fn47e3t87e3t03r6+uL+/v7//39/f/R0dGc6+vr3f//////////+fn54u7u
        7sL/////6urq9by8vGXCwsIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADGxsYAv7+/Eu/v78D6+vr/1tbWeba2thXd3d1+7e3twM/Pz3np6enR/v7+/Pz8
        /Pvx8fHS5eXlke7u7r/m5uZ80dHRF8/PzwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAImJiQDn5+cA1NTUQezs7Ofm5ua90NDQH////wC8vLwKp6enCczM
        zC/w8PBN6+vrS8TExCu/v78Ir6+vCcTExAHV1dUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKGhoQAnJycBzs7OSOzs7M/l5eWmycnJEs/P
        zwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIqKigD///8Ay8vLINzc
        3Hzb29s82traAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/gAAfyAAAAAAAAAAAAAAAPAAAAPwAAAD+AAAAfgAAAD+AAAA/wAAAP/g
        AAD/4AAA/+AAAP/wAAD/8AAA//AAAP/wAAH/8AAD//AAB//gAB//wAA//4AA//+AAP//AAD//wAAf/8A
        AP//AAD//wAA//8AAP//hAH//4P////j//8=
</value>
  </data>
</root>